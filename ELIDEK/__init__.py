## This file is ran automatically the first time a Python program imports the package dbdemo
from flask import Flask, render_template, request, flash, redirect, url_for, abort
from flask_mysqldb import MySQL

## __name__ is the name of the module. When running directly from python, it will be 'dbdemo'
## Outside of this module, as in run.py, it is '__main__' by default
## Create an instance of the Flask class to be used for request routing
app = Flask(__name__)

## configuration of database

app.config["MYSQL_USER"] = 'root'
app.config["MYSQL_PASSWORD"] = ''
app.config["MYSQL_DB"] = 'ELIDEK'
app.config["MYSQL_HOST"] = 'localhost'
app.config["SECRET_KEY"] = 'a3984dec288ba115de8cd1bb29632e6ccf9c071e029c43d0a7d23a51a1ceb56b' ## secret key for sessions (signed cookies). Flask uses it to protect the contents of the user session against tampering.
app.config["WTF_CSRF_SECRET_KEY"] = 'c3010877dd6c5de6ebe6dd73b50634b67486965489ca2769b15bf835c66496b4' ## token for csrf protection of forms.
## secret keys can be generated by secrets.token_hex()


## initialize database connection object
db = MySQL(app)


@app.route("/")
def index():
    return render_template("Navigation.html")


@app.route("/CRUD")
def CRUD_menu():
    return render_template("Creates/CRUD.html")


@app.route("/CRUD/choice", methods = ['GET','POST'])
def CRUD_choice():
    if (request.method == 'GET'):
        return redirect('/CRUD')

    #else
    allowed = ["Project","Researcher","Organisation","Phone","Field","Project_in_Field","Participates","Deliverable","Program","Executive"]
    table = request.form.get('Table')
    button = request.form.get('button')

    if not table in allowed:
        return redirect('/CRUD')

    if button=='Create Entry':
        return redirect('/CRUD/Create/{}'.format(table))
    elif button=='Read/Modify/Delete Contents':
        return redirect('/CRUD/Read-Modify-Delete/{}'.format(table))

    return redirect('/CRUD')


@app.route("/CRUD/Create/Project", methods = ['GET','POST'])
def Cr_Project():
    if request.method == 'GET':
        return render_template("Creates/Create-Project.html")

    #else
    if ('"' in request.form['Summary'] or '"' in request.form['Title']):
        flash('Text fields must not contain quotation marks', "danger")
        return redirect('/CRUD/Create/Project')

    form = {}
    for key,value in request.form.items():
        if (value==''):
            form[key] = 'NULL'
        else:
            form[key] = '"'+value+'"'





    query = '''INSERT INTO Project (Title,Summary,Funding_amount,Start_date,Finish_date,Program_id,Executive_id,Org_id,Researcher_id_sup,Researcher_id_eval,Eval_date,Eval_grade) VALUES
            ({},{},{},{},{},{},{},{},{},{},{},{});'''.format(form['Title'],form['Summary'],form['Funding_amount'],form['Start_date'],form['Finish_date'],form['Program_id'],form['Executive_id'],form['Org_id'],form['Researcher_id_sup'],form['Researcher_id_eval'],form['Eval_date'],form['Eval_grade'])

    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Project inserted successfully", "success")
    except Exception as e:
        flash(str(e), "danger")

    return redirect('/CRUD/Create/Project')




@app.route("/CRUD/Create/Researcher", methods = ['GET','POST'])
def Cr_Researcher():
    if request.method == 'GET':
        return render_template("Creates/Create-Researcher.html")

    #else
    if ('"' in request.form['First_name'] or '"' in request.form['Last_name']):
        flash('Text fields must not contain quotation marks', "danger")
        return redirect('/CRUD/Create/Researcher')

    form = {}
    for key,value in request.form.items():
        if (value==''):
            form[key] = 'NULL'
        else:
            form[key] = '"'+value+'"'



    query = '''INSERT INTO Researcher (First_name,Last_name,Sex,Birthdate,Org_id,Start_date) VALUES
            ({},{},{},{},{},{});'''.format(form['First_name'],form['Last_name'],form['Sex'],form['Birthdate'],form['Org_id'],form['Start_date'])

    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Researcher inserted successfully", "success")
    except Exception as e:
        flash(str(e), "danger")

    return redirect('/CRUD/Create/Researcher')


@app.route("/CRUD/Create/Field", methods = ['GET','POST'])
def Cr_Field():
    if request.method == 'GET':
        return render_template("Creates/Create-Field.html")

    if ('"' in request.form['Field_name']):
        flash('Text fields must not contain quotation marks', "danger")
        return redirect('/CRUD/Create/Field')

    form = {}
    for key,value in request.form.items():
        if (value==''):
            form[key] = 'NULL'
        else:
            form[key] = '"'+value+'"'


    query = '''INSERT INTO Fields (Field_name) VALUES
            ({});'''.format(form['Field_name'])

    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Field inserted successfully", "success")
    except Exception as e:
        flash(str(e), "danger")

    return redirect('/CRUD/Create/Field')


@app.route("/CRUD/Create/Executive", methods = ['GET','POST'])
def Cr_Executive():
    if request.method == 'GET':
        return render_template("Creates/Create-Executive.html")

    #else

    if ('"' in request.form['Name']):
        flash('Text fields must not contain quotation marks', "danger")
        return redirect('/CRUD/Create/Executive')


    form = {}
    for key,value in request.form.items():
        if (value==''):
            form[key] = 'NULL'
        else:
            form[key] = '"'+value+'"'





    query = '''INSERT INTO EXECUTIVE (Name) VALUES
            ({});'''.format(form['Name'])

    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Executive inserted successfully", "success")
    except Exception as e:
        flash(str(e), "danger")

    return redirect('/CRUD/Create/Executive')


@app.route("/CRUD/Create/Program", methods = ['GET','POST'])
def Cr_Program():
    if request.method == 'GET':
        return render_template("Creates/Create-Program.html")

    if ('"' in request.form['Name'] or '"' in request.form['Administration']):
        flash('Text fields must not contain quotation marks', "danger")
        return redirect('/CRUD/Create/Program')

    form = {}
    for key,value in request.form.items():
        if (value==''):
            form[key] = 'NULL'
        else:
            form[key] = '"'+value+'"'





    query = '''INSERT INTO Program (Name, Administration) VALUES
            ({}, {});'''.format(form['Name'], form['Administration'])

    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Program inserted successfully", "success")
    except Exception as e:
        flash(str(e), "danger")

    return redirect('/CRUD/Create/Program')


@app.route("/CRUD/Create/Deliverable", methods = ['GET','POST'])
def Cr_Deliverable():
    if request.method == 'GET':
        return render_template("Creates/Create-Deliverable.html")

    #else

    if ('"' in request.form['Title'] or '"' in request.form['Summary']):
        flash('Text fields must not contain quotation marks', "danger")
        return redirect('/CRUD/Create/Deliverable')


    form = {}
    for key,value in request.form.items():
        if (value==''):
            form[key] = 'NULL'
        else:
            form[key] = '"'+value+'"'


    query = '''INSERT INTO Deliverable (Project_id,Title,Summary,Due_date) VALUES
            ({},{},{},{});'''.format(form['Project_id'],form['Title'],form['Summary'],form['Due_date'])

    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Deliverable inserted successfully", "success")
    except Exception as e:
        flash(str(e), "danger")

    return redirect('/CRUD/Create/Deliverable')


@app.route("/CRUD/Create/Project_in_Field", methods = ['GET','POST'])
def Cr_Project_in_field():
    if request.method == 'GET':
        return render_template("Creates/Create-Project-in-field.html")

    if ('"' in request.form['Field_name']):
        flash('Text fields must not contain quotation marks', "danger")
        return redirect('/CRUD/Create/Project_in_Field')

    form = {}
    for key,value in request.form.items():
        if (value==''):
            form[key] = 'NULL'
        else:
            form[key] = '"'+value+'"'




    query = '''INSERT INTO Project_in_Field (Project_id, Field_name) VALUES
            ({}, {});'''.format(form['Project_id'], form['Field_name'])

    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Project in field inserted successfully", "success")
    except Exception as e:
        flash(str(e), "danger")

    return redirect('/CRUD/Create/Project_in_Field')


@app.route("/CRUD/Create/Participates", methods = ['GET','POST'])
def Cr_Participates():
    if request.method == 'GET':
        return render_template("Creates/Create-Participates.html")

    #else

    form = {}
    for key,value in request.form.items():
        if (value==''):
            form[key] = 'NULL'
        else:
            form[key] = '"'+value+'"'


    query = '''INSERT INTO Participates (Project_id,Researcher_id) VALUES
            ({},{});'''.format(form['Project_id'],form['Researcher_id'])

    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Participates inserted successfully", "success")
    except Exception as e:
        flash(str(e), "danger")

    return redirect('/CRUD/Create/Participates')


@app.route("/CRUD/Create/Phone", methods = ['GET','POST'])
def Cr_Phone():
    if request.method == 'GET':
        return render_template("Creates/Create-Phones.html")

    #else

    form = {}
    for key,value in request.form.items():
        if (value==''):
            form[key] = 'NULL'
        else:
            form[key] = '"'+value+'"'


    query = '''INSERT INTO Phone_inst (Number,Org_id) VALUES
            ({},{});'''.format(form['Number'],form['Org_id'])

    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Phone_inst inserted successfully", "success")
    except Exception as e:
        flash(str(e), "danger")

    return redirect('/CRUD/Create/Phone')


@app.route("/CRUD/Create/Organisation", methods = ['GET','POST'])
def Cr_Organisation():
    if request.method == 'GET':
        return render_template("Creates/Create-Organisation.html")

    #else


    if ('"' in request.form['Abbreviation'] or '"' in request.form['Name'] or '"' in request.form['Zip_code']
        or '"' in request.form['Street'] or '"' in request.form['City']):
        flash('Text fields must not contain quotation marks', "danger")
        return redirect('/CRUD/Create/Organisation')


    form = {}
    for key,value in request.form.items():
        if (value==''):
            form[key] = 'NULL'
        else:
            form[key] = '"'+value+'"'


    query1 = '''INSERT INTO Organisation (Abbreviation, Name, Zip_code, Street, City) VALUES
            ({},{},{},{},{});'''.format(form['Abbreviation'],form['Name'],form['Zip_code'],form['Street'],form['City'])

    try:
        cur = db.connection.cursor()
        cur.execute(query1)
        db.connection.commit()

        cur.execute('''SELECT LAST_INSERT_ID();''')
        Org_id = cur.fetchone()[0]

        if (form['Type']=='"Research facility"'):
            query2 = '''INSERT INTO Res_facility (Org_id, Min_budget, Priv_budget) VALUES
                    ({},{},{});'''.format(Org_id,form['Min_budget'],form['Priv_budget'])

        elif (form['Type']=='"University"'):
            query2 = '''INSERT INTO University (Org_id, Min_budget) VALUES
                    ({},{});'''.format(Org_id, form['Min_budget'])

        elif (form['Type']=='"Company"'):
            query2 = '''INSERT INTO Company (Org_id, Equity) VALUES
                    ({},{});'''.format(Org_id, form['Equity'])
        else:
            raise Exception("Type must be one of: University, Research facility, Company")


        cur.execute(query2)
        db.connection.commit()

        cur.close()
        flash("Organisation inserted successfully", "success")
    except Exception as e:
        flash(str(e), "danger")

    return redirect('/CRUD/Create/Organisation')



# QUERIES =============================================================

@app.route("/3.1", methods = ['GET','POST'])
def threeone():
    if request.method == "GET":
        return render_template("Queries/3.1.get.html")

    #else

    # START DATE
    Start_date = request.form.get('Start_date')
    # FINISH DATE
    Finish_date = request.form.get('Finish_date')

    # DURATION DATE
    Duration = request.form.get('Duration')

    # EXECUTIVE NAME
    Executive_name = request.form.get('Name')
    #avoid sql injection by making sure Field only contains letters or spaces
    if not all(x.isalpha() or x.isspace() for x in Executive_name):
        flash("Executive name must only contain letters/spaces", "danger")
        return render_template("Queries/3.1.get.html")


    data = {"P.Start_date":'"'+Start_date+'"', "P.Finish_date":'"'+Finish_date+'"', "P.Duration":Duration,"E.Name":'"'+Executive_name+'"'}

    query2 = """ SELECT * FROM Program ;"""

    if (Finish_date and Start_date and Duration):
        flash("At least one of the fields: Start date, Finish date, Duration fields must be empty", "danger")
        return render_template("Queries/3.1.get.html")


    try:
        if not(Start_date or Finish_date or Duration or Executive_name):
            query = """SELECT * FROM Project;"""
        elif(Executive_name):
            query = """SELECT * FROM Project P JOIN Executive E ON P.Executive_id = E.Executive_id WHERE"""
            for i,k in data.items():
                if (k and k!='""'): query += """ {} = {} AND""".format(i,k)

            query = query[:-4] + ';'
        else :

            query = """SELECT * FROM Project P WHERE"""
            for i,k in data.items():
                if (k and k!='""'): query += """ {} = {} AND""".format(i,k)

            query = query[:-4] + ';'

        cur = db.connection.cursor()
        cur.execute(query)
        column_names = [i[0] for i in cur.description]
        Projects = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.execute(query2)
        column_names = [i[0] for i in cur.description]
        Programs = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.close()

        return render_template("Queries/3.1.post.html",Projects=Projects,Programs=Programs)
    except Exception as e:
        flash(str(e), "danger")
        return render_template("Queries/3.1.get.html")


# ------------------------------------------------------------------------------------------------------

@app.route("/3.1/<int:id>")
def show_res(id):
    query = """SELECT Researcher_id, First_name, Last_name, Sex, Birthdate, Org_id, Start_date  FROM Participates NATURAL JOIN Researcher WHERE Project_id = {};""".format(id)

    try:
        cur = db.connection.cursor()

        cur.execute(query)
        column_names = [i[0] for i in cur.description]
        Researchers = [dict(zip(column_names, entry)) for entry in cur.fetchall()]
        cur.close()

        return render_template("Queries/3.1.res.html",Researchers=Researchers)
    except Exception as e:
        flash(str(e), "danger")
        return redirect('/Queries/3.1')


# ------------------------------------------------------------------------------------------------------

@app.route("/3.2")
def threettwo():
    query1 = """SELECT * FROM Projects_per_Researcher"""
    query2 = """SELECT * FROM Projects_per_Researcher_count"""
    query3 = """SELECT * FROM Organisation_type"""
    try:
        cur = db.connection.cursor()

        cur.execute(query1)
        column_names = [i[0] for i in cur.description]
        PpRs = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.execute(query2)
        column_names = [i[0] for i in cur.description]
        PpRcs = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.execute(query3)
        column_names = [i[0] for i in cur.description]
        Organisations = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.close()

        return render_template("Queries/3.2.html",PpRs=PpRs,PpRcs=PpRcs,Organisations=Organisations)
    except Exception as e:
        flash(str(e), "danger")
        return redirect('/')

# ------------------------------------------------------------------------------------------------------

@app.route("/3.3", methods = ['GET','POST'])
def threethree():
    if request.method == "GET":
        return redirect('/')

    #else
    Field = request.form.get('Field')
    try:
        #avoid sql injection by making sure Field only contains letters or spaces
        if not all(x.isalpha() or x.isspace() for x in Field):
            raise Exception("Field must only contain letters/spaces")

        query1 = """SELECT P.Project_id,Title FROM (SELECT Project_id,Title FROM Project WHERE DATEDIFF(CURDATE(), Start_date) >= 0 AND DATEDIFF(CURDATE(), Finish_date) <= 0) AS P
                JOIN (SELECT Project_id FROM Project_in_Field WHERE Field_name = "{}") AS F ON P.Project_id = F.Project_id;""".format(Field)

        query2 = """SELECT First_name, Last_name FROM (SELECT Project_id, First_name, Last_name FROM (SELECT Project_id, First_name, Last_name FROM Researcher NATURAL JOIN Participates) AS PARP
                  NATURAL JOIN (SELECT Project_id FROM Project WHERE DATEDIFF(CURDATE(), Start_date) >=365 AND DATEDIFF(CURDATE(), Finish_date) < 0) AS RPY) AS RES NATURAL JOIN Project_in_Field F
                  WHERE Field_name = "{}";""".format(Field)

        cur = db.connection.cursor()
        cur.execute(query1)
        column_names = [i[0] for i in cur.description]
        Projects = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.execute(query2)
        column_names = [i[0] for i in cur.description]
        Researchers = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.close()

        return render_template("Queries/3.3.html",Projects=Projects,Researchers=Researchers)
    except Exception as e:
        flash(str(e), "danger")
        return redirect('/')

# ------------------------------------------------------------------------------------------------------

@app.route("/3.4")
def threetfour():
    query = """SELECT OrgProj1.Org_id AS Org_id, OrgProj2.Year as Year_1, OrgProj1.Year as Year_2, OrgProj1.Projects_in_year AS Projects_in_year FROM (SELECT Org_id, YEAR(Start_date) as Year, count(Project_id)
                AS Projects_in_year FROM Organisation NATURAL JOIN Project GROUP BY Org_id, YEAR(Start_date) HAVING count(Project_id) >= 10) AS OrgProj1 JOIN (SELECT Org_id, YEAR(Start_date) as Year, count(Project_id)
                AS Projects_in_year FROM Organisation NATURAL JOIN Project GROUP BY Org_id, YEAR(Start_date) HAVING count(Project_id) >= 10) AS OrgProj2 ON OrgProj1.Org_id = OrgProj2.Org_id AND
                OrgProj1.Year = OrgProj2.Year + 1 AND OrgProj1.Projects_in_year = OrgProj2.Projects_in_year;"""
    try:
        cur = db.connection.cursor()
        cur.execute(query)
        column_names = [i[0] for i in cur.description]
        Organisations = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.close()

        return render_template("Queries/3.4.html",Organisations=Organisations)
    except Exception as e:
        flash(str(e), "danger")
        return redirect('/')

# ------------------------------------------------------------------------------------------------------

@app.route("/3.5")
def threetfive():

    query = """SELECT PF1.Field_name AS Field_name_1, PF2.Field_name AS Field_name_2, count(PF1.Project_id) AS Projects_per_field_pair FROM
                Project_in_Field as PF1 INNER JOIN Project_in_Field as PF2 on PF1.Project_id = PF2.Project_id AND PF1.Field_name < PF2.Field_name
                GROUP BY PF1.Field_name, PF2.Field_name ORDER BY Projects_per_field_pair DESC LIMIT 3;"""
    try:
        cur = db.connection.cursor()
        cur.execute(query)
        column_names = [i[0] for i in cur.description]
        Field_pairs = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.close()

        return render_template("Queries/3.5.html",Field_pairs=Field_pairs)
    except Exception as e:
        flash(str(e), "danger")
        return redirect('/')

# ------------------------------------------------------------------------------------------------------

@app.route("/3.6")
def threetsix():

    query = """SELECT First_name,Last_name,count(Project_id) AS Count_Projects FROM (SELECT * FROM (SELECT Researcher_id,First_name,Last_name FROM Researcher
               WHERE DATEDIFF(CURDATE(), Birthdate) < 40*365) AS R NATURAL JOIN Participates PART) AS RES NATURAL JOIN (SELECT Project_id FROM Project WHERE
               DATEDIFF(CURDATE(), Start_date) >= 0 AND DATEDIFF(CURDATE(), Finish_date) <= 0) AS P GROUP BY Researcher_id ORDER BY count(Project_id) DESC;"""

    try:

        cur = db.connection.cursor()
        cur.execute(query)
        column_names = [i[0] for i in cur.description]
        Researchers = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.close()

        return render_template("Queries/3.6.html",Researchers=Researchers)
    except Exception as e:
        flash(str(e), "danger")
        return redirect('/')

# ------------------------------------------------------------------------------------------------------

@app.route("/3.7")
def threeseven():
    query = """SELECT EX.Name AS Executive_name, Pr.Name AS Organisation_name, sum(Funding_amount) AS Total_amount FROM Executive EX JOIN (SELECT P.Org_id,Name,Funding_amount,Executive_id
                   FROM Project P JOIN (SELECT Org_id,Name FROM Company NATURAL JOIN Organisation) AS CP ON P.Org_id = CP.Org_id) AS PR ON EX.Executive_id = PR.Executive_id
                   GROUP BY EX.Executive_id, PR.Org_id ORDER BY sum(Funding_amount) DESC LIMIT 5;"""
    try:
        cur = db.connection.cursor()
        cur.execute(query)
        column_names = [i[0] for i in cur.description]
        Executives = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.close()

        return render_template("Queries/3.7.html",Executives=Executives)
    except Exception as e:
        flash(str(e), "danger")
        return redirect('/')

# ------------------------------------------------------------------------------------------------------

@app.route("/3.8")
def threeeight():
    query = """SELECT First_name, Last_name, Number_of_Projects FROM Researcher R JOIN (SELECT Researcher_id, count(PR.Project_id) AS Number_of_Projects FROM
                   ((SELECT Project_id FROM Project) EXCEPT (SELECT P.Project_id FROM Project P JOIN Deliverable D ON P.Project_id = D.Project_id)) AS PR JOIN
                   Participates PART ON PR.Project_id = PART.Project_id GROUP BY Researcher_id HAVING count(PR.Project_id)>=5) AS PWD ON R.Researcher_id = PWD.Researcher_id
                   ORDER BY Number_of_Projects DESC;"""
    try:
        cur = db.connection.cursor()
        cur.execute(query)
        column_names = [i[0] for i in cur.description]
        Researchers = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.close()

        return render_template("Queries/3.8.html",Researchers=Researchers)
    except Exception as e:
        flash(str(e), "danger")
        return redirect('/')

# =====================================================================================================


@app.route("/CRUD/Read-Modify-Delete/Researcher", methods=['GET','POST'])
def Researcher():
    if request.method=='POST':
        form = request.form
        if form['button']=='Update':
            return redirect('/CRUD/Read-Modify-Delete/Researcher/Update/{}'.format(form.get('Update')))
        elif form['button']!='Delete':
            return redirect('/CRUD/Read-Modify-Delete/Researcher')
        #else

        try:
            cur = db.connection.cursor()
            for i in form.getlist('Delete'):
                query = 'DELETE FROM Researcher WHERE Researcher_id = "{}";'.format(i)
                cur.execute(query)
                db.connection.commit()
                flash("Researcher with Researcher_id={} deleted successfully".format(i), "success")
            cur.close()
        except Exception as e:
            flash(str(e), "danger")
            return redirect('/CRUD/Read-Modify-Delete/Researcher')
    try:
        ## create connection to database
        cur = db.connection.cursor()
        ## execute query
        cur.execute("SELECT * FROM Researcher;")

        column_names = [i[0] for i in cur.description]
        Researchers = [dict(zip(column_names, entry)) for entry in cur.fetchall()]
        cur.close()
        return render_template("RD/Researcher.html", Researchers=Researchers)
    except Exception as e:
        flash(str(e), "danger")
        return render_template("RD/Researcher.html")






@app.route("/CRUD/Read-Modify-Delete/Deliverable", methods=['GET','POST'])
def Deliverable():
    if request.method=='POST':
        form = request.form

        if form['button']=='Update':
            return redirect('/CRUD/Read-Modify-Delete/Deliverable/Update/{}'.format(form.get('Update')))
        elif form['button']!='Delete':
            return redirect('/CRUD/Read-Modify-Delete/Deliverable')
        #else

        try:

            cur = db.connection.cursor()
            for i in form.getlist('Delete'):
                data = i.split(",")
                id = data[0]
                title = ','.join(data[1:])
                query = 'DELETE FROM Deliverable WHERE Project_id = "{}" AND Title = "{}";'.format(id,title)
                cur.execute(query)
                db.connection.commit()
                flash("Deliverable with Project_id={} and Title={} deleted successfully".format(id,title), "success")
            cur.close()
        except Exception as e:
            flash(str(e), "danger")
            return redirect('/CRUD/Read-Modify-Delete/Deliverable')
    try:
        ## create connection to database
        cur = db.connection.cursor()
        ## execute query
        cur.execute("SELECT * FROM Deliverable;")

        column_names = [i[0] for i in cur.description]
        Deliverables = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.close()
        return render_template("RD/Deliverable.html", Deliverables=Deliverables)
    except Exception as e:
        flash(str(e), "danger")
        return render_template("RD/Deliverable.html")





@app.route("/CRUD/Read-Modify-Delete/Organisation", methods=['GET','POST'])
def Organisation():
    if request.method=='POST':
        form = request.form
        if form['button']=='Update':
            return redirect('/CRUD/Read-Modify-Delete/Organisation/Update/{}'.format(form.get('Update')))
        elif form['button']!='Delete':
            return redirect('/CRUD/Read-Modify-Delete/Organisation')
        #else

        try:
            cur = db.connection.cursor()
            for i in form.getlist('Delete'):
                query = 'DELETE FROM Organisation WHERE Org_id = "{}";'.format(i)
                cur.execute(query)
                db.connection.commit()
                flash("Organisation with Org_id={} deleted successfully".format(i), "success")
            cur.close()
        except Exception as e:
            flash(str(e), "danger")
            return redirect('/CRUD/Read-Modify-Delete/Organisation')
    try:
        ## create connection to database
        cur = db.connection.cursor()
        ## execute query
        cur.execute("SELECT * FROM organisation_type;")
        column_names = [i[0] for i in cur.description]
        Organisations = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.close()
        return render_template("RD/Organisation.html", Organisations=Organisations)
    except Exception as e:
        flash(str(e), "danger")
        return render_template("RD/Organisation.html")



@app.route("/CRUD/Read-Modify-Delete/Field", methods=['GET','POST'])
def Fields():
    if request.method=='POST':
        form = request.form
        if form['button']=='Update':
            return redirect('/CRUD/Read-Modify-Delete/Field/Update/{}'.format(form.get('Update')))
        elif form['button']!='Delete':
            return redirect('/CRUD/Read-Modify-Delete/Field')
        #else

        try:
            cur = db.connection.cursor()
            for i in form.getlist('Delete'):
                query = 'DELETE FROM fields WHERE field_name = "{}";'.format(i)
                cur.execute(query)
                db.connection.commit()
                flash("Field with field_name={} deleted successfully".format(i), "success")
            cur.close()
        except Exception as e:
            flash(str(e), "danger")
            return redirect('/CRUD/Read-Modify-Delete/Field')
    try:
        ## create connection to database
        cur = db.connection.cursor()
        ## execute query
        cur.execute("SELECT * FROM Fields;")

        column_names = [i[0] for i in cur.description]
        Fields = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.close()
        return render_template("RD/Fields.html", Fields=Fields)
    except Exception as e:
        flash(str(e), "danger")
        return render_template("RD/Fields.html")





@app.route("/CRUD/Read-Modify-Delete/Project_in_Field", methods=['GET','POST'])
def Project_in_Field():
    if request.method=='POST':
        form = request.form
        if form['button']=='Update':
            return redirect('/CRUD/Read-Modify-Delete/Project_in_Field/Update/{}'.format(form.get('Update')))
        elif form['button']!='Delete':
            return redirect('/CRUD/Read-Modify-Delete/Project_in_Field')
        #else

        try:
            cur = db.connection.cursor()
            for i in form.getlist('Delete'):
                data = i.split(",")
                id = data[0]
                name = ','.join(data[1:])
                query = 'DELETE FROM Project_in_Field WHERE Project_id = "{}" AND Field_name= "{}";'.format(id,name)
                cur.execute(query)
                db.connection.commit()
                flash("Project in Field with Project_id={} and Field_name={} deleted successfully".format(id,name), "success")
            cur.close()
        except Exception as e:
            flash(str(e), "danger")
            return redirect('/CRUD/Read-Modify-Delete/Project_in_Field')
    try:
        ## create connection to database
        cur = db.connection.cursor()
        ## execute query
        cur.execute("SELECT * FROM Project_in_Field;")

        column_names = [i[0] for i in cur.description]
        PiFs = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.close()
        return render_template("RD/Project-in-Field.html", PiFs=PiFs)
    except Exception as e:
        flash(str(e), "danger")
        return render_template("RD/Project-in-Field.html")






@app.route("/CRUD/Read-Modify-Delete/Participates", methods=['GET','POST'])
def Participates():
    if request.method=='POST':
        form = request.form
        if form['button']=='Update':
            return redirect('/CRUD/Read-Modify-Delete/Participates/Update/{}'.format(form.get('Update')))
        elif form['button']!='Delete':
            return redirect('/CRUD/Read-Modify-Delete/Participates')
        #else

        try:
            cur = db.connection.cursor()
            for i in form.getlist('Delete'):
                data = i.split(",")
                p_id = data[0]
                r_id = data[1]
                query = 'DELETE FROM Participates WHERE Project_id = "{}" AND Researcher_id= "{}";'.format(p_id,r_id)
                cur.execute(query)
                db.connection.commit()
                flash("Participates with Project_id={} and Researcher_id={} deleted successfully".format(p_id,r_id), "success")
            cur.close()
        except Exception as e:
            flash(str(e), "danger")
            return redirect('/CRUD/Read-Modify-Delete/Participates')
    try:
        ## create connection to database
        cur = db.connection.cursor()
        ## execute query
        cur.execute("SELECT * FROM Participates;")

        column_names = [i[0] for i in cur.description]
        Participates = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.close()
        return render_template("RD/Participates.html",Participates=Participates)
    except Exception as e:
        flash(str(e), "danger")
        return render_template("RD/Participates.html")







@app.route("/CRUD/Read-Modify-Delete/Program", methods=['GET','POST'])
def Program():
    if request.method=='POST':
        form = request.form
        if form['button']=='Update':
            return redirect('/CRUD/Read-Modify-Delete/Program/Update/{}'.format(form.get('Update')))
        elif form['button']!='Delete':
            return redirect('/CRUD/Read-Modify-Delete/Program')
        #else

        try:
            cur = db.connection.cursor()
            for i in form.getlist('Delete'):
                query = 'DELETE FROM Program WHERE Program_id = "{}";'.format(i)
                cur.execute(query)
                db.connection.commit()
                flash("Program with Program_id={} deleted successfully".format(i), "success")
            cur.close()
        except Exception as e:
            flash(str(e), "danger")
            return redirect('/CRUD/Read-Modify-Delete/Program')
    try:
        ## create connection to database
        cur = db.connection.cursor()
        ## execute query
        cur.execute("SELECT * FROM Program;")

        column_names = [i[0] for i in cur.description]
        Programs = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.close()
        return render_template("RD/Program.html", Programs=Programs)
    except Exception as e:
        flash(str(e), "danger")
        return render_template("RD/Program.html")






@app.route("/CRUD/Read-Modify-Delete/Project", methods=['GET','POST'])
def Project():
    if request.method=='POST':
        form = request.form
        if form['button']=='Update':
            return redirect('/CRUD/Read-Modify-Delete/Project/Update/{}'.format(form.get('Update')))
        elif form['button']!='Delete':
            return redirect('/CRUD/Read-Modify-Delete/Project')
        #else

        try:
            cur = db.connection.cursor()
            for i in form.getlist('Delete'):
                query = 'DELETE FROM PROJECT WHERE Project_id = "{}";'.format(i)
                cur.execute(query)
                db.connection.commit()
                flash("Project with Project_id={} deleted successfully".format(i), "success")
            cur.close()
        except Exception as e:
            flash(str(e), "danger")
            return redirect('/CRUD/Read-Modify-Delete/Project')
    try:
        ## create connection to database
        cur = db.connection.cursor()
        ## execute query
        cur.execute("SELECT * FROM Project;")

        column_names = [i[0] for i in cur.description]
        Projects = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.close()
        return render_template("RD/Project.html", Projects=Projects)
    except Exception as e:
        flash(str(e), "danger")
        return render_template("RD/Project.html")






@app.route("/CRUD/Read-Modify-Delete/Phone", methods=['GET','POST'])
def Phones():
    if request.method=='POST':
        form = request.form
        if form['button']=='Update':
            return redirect('/CRUD/Read-Modify-Delete/Phone/Update/{}'.format(form.get('Update')))
        elif form['button']!='Delete':
            return redirect('/CRUD/Read-Modify-Delete/Phone')
        #else

        try:
            cur = db.connection.cursor()
            for i in form.getlist('Delete'):
                query = 'DELETE FROM Phone_inst WHERE Number = "{}";'.format(i)
                cur.execute(query)
                db.connection.commit()
                flash("Phone with Number={} deleted successfully".format(i), "success")
            cur.close()
        except Exception as e:
            flash(str(e), "danger")
            return redirect('/CRUD/Read-Modify-Delete/Phone')
    try:
        ## create connection to database
        cur = db.connection.cursor()
        ## execute query
        cur.execute("SELECT * FROM Phone_inst;")
        column_names = [i[0] for i in cur.description]
        Phones = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.close()
        return render_template("RD/Phones.html", Phones=Phones)
    except Exception as e:
        flash(str(e), "danger")
        return render_template("RD/Phones.html")









@app.route("/CRUD/Read-Modify-Delete/Executive", methods=['GET','POST'])
def Executive():
    if request.method=='POST':
        form = request.form
        if form['button']=='Update':
            return redirect('/CRUD/Read-Modify-Delete/Executive/Update/{}'.format(form.get('Update')))
        elif form['button']!='Delete':
            return redirect('/CRUD/Read-Modify-Delete/Executive')
        #else

        try:
            cur = db.connection.cursor()
            for i in form.getlist('Delete'):
                query = 'DELETE FROM Executive WHERE Executive_id = "{}";'.format(i)
                cur.execute(query)
                db.connection.commit()
                flash("Executive with Executive_id={} deleted successfully".format(i), "success")
            cur.close()
        except Exception as e:
            flash(str(e), "danger")
            return redirect('/CRUD/Read-Modify-Delete/Executive')
    try:
        ## create connection to database
        cur = db.connection.cursor()
        ## execute query
        cur.execute("SELECT * FROM Executive;")

        column_names = [i[0] for i in cur.description]
        Executives = [dict(zip(column_names, entry)) for entry in cur.fetchall()]

        cur.close()
        return render_template("RD/Executive.html", Executives=Executives)
    except Exception as e:
        flash(str(e), "danger")
        return render_template("RD/Executive.html")




# UPDATE ROUTES ======================================================================================================================


@app.route("/CRUD/Read-Modify-Delete/Researcher/Update/<int:id>", methods = ['GET','POST'])
def Up_Researcher(id):
    if request.method == 'GET':
        return render_template("Updates/Update-Researcher.html", id=id)

    #else
    if ('"' in request.form['First_name'] or '"' in request.form['Last_name']):
        flash('Text fields must not contain quotation marks', "danger")
        return redirect('/CRUD/Read-Modify-Delete/Researcher/Update/{}'.format(id))

    form = {}
    for key,value in request.form.items():
        if (value==''):
            form[key] = 'NULL'
        else:
            form[key] = '"'+value+'"'



    query = '''UPDATE Researcher SET First_name = {},Last_name = {},Sex = {},Birthdate ={},Org_id= {},Start_date ={} WHERE Researcher_id = {};'''.format(form['First_name'],form['Last_name'],form['Sex'],form['Birthdate'],form['Org_id'],form['Start_date'],id)

    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Researcher updated successfully", "success")
    except Exception as e:
        flash(str(e), "danger")

    return redirect('/CRUD/Read-Modify-Delete/Researcher')







@app.route("/CRUD/Read-Modify-Delete/Project/Update/<int:Project_id>", methods = ['GET','POST'])
def Up_Project(Project_id):
    if request.method == 'GET':
        return render_template("Updates/Update-Project.html", Project_id=Project_id)

    #else
    if ('"' in request.form['Summary'] or '"' in request.form['Title']):
        flash('Text fields must not contain quotation marks', "danger")
        return redirect('/CRUD/Read-Modify-Delete/Project/Update/{}'.format(Project_id))

    form = {}
    for key,value in request.form.items():
        if (value==''):
            form[key] = 'NULL'
        else:
            form[key] = '"'+value+'"'





    query = '''UPDATE Project SET Title={}, Summary={}, Funding_amount={}, Start_date={}, Finish_date={}, Program_id={}, Executive_id={}, Org_id={}, Researcher_id_sup={}, Researcher_id_eval={}, Eval_date={}, Eval_grade={}
          WHERE Project_id = {};'''.format(form['Title'],form['Summary'],form['Funding_amount'],form['Start_date'],form['Finish_date'],form['Program_id'],form['Executive_id'],form['Org_id'],form['Researcher_id_sup'],form['Researcher_id_eval'],form['Eval_date'],form['Eval_grade'],Project_id)

    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Project updated successfully", "success")
    except Exception as e:
        flash(str(e), "danger")

    return redirect('/CRUD/Read-Modify-Delete/Project')






@app.route("/CRUD/Read-Modify-Delete/Project_in_Field/Update/<string:data>", methods = ['GET','POST'])
def Up_Project_in_field(data):
    if request.method == 'GET':
        return render_template("Updates/Update-Project-in-field.html",data=data)

    if ('"' in request.form['Field_name']):
        flash('Text fields must not contain quotation marks', "danger")
        return redirect('/CRUD/Read-Modify-Delete/Project_in_Field/Update/{}'.format(data))

    form = {}
    for key,value in request.form.items():
        if (value==''):
            form[key] = 'NULL'
        else:
            form[key] = '"'+value+'"'

    data = data.split(",")
    id = data[0]
    name = ','.join(data[1:])


    query = '''UPDATE Project_in_Field SET Project_id={}, Field_name={} WHERE Project_id={} AND Field_Name="{}";'''.format(form['Project_id'], form['Field_name'],id,name)

    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Project in field updated successfully", "success")
    except Exception as e:
        flash(str(e), "danger")

    return redirect('/CRUD/Read-Modify-Delete/Project_in_Field')







@app.route("/CRUD/Read-Modify-Delete/Program/Update/<int:Program_id>", methods = ['GET','POST'])
def Up_Program(Program_id):
    if request.method == 'GET':
        return render_template("Updates/Update-Program.html", Program_id=Program_id)

    if ('"' in request.form['Name'] or '"' in request.form['Administration']):
        flash('Text fields must not contain quotation marks', "danger")
        return redirect('/CRUD/Read-Modify-Delete/Program/Update/{}'.format(Program_id))

    form = {}
    for key,value in request.form.items():
        if (value==''):
            form[key] = 'NULL'
        else:
            form[key] = '"'+value+'"'





    query = '''UPDATE Program SET Name={}, Administration={}
            WHERE Program_id = {};'''.format(form['Name'], form['Administration'], Program_id)

    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Program updated successfully", "success")
    except Exception as e:
        flash(str(e), "danger")

    return redirect('/CRUD/Read-Modify-Delete/Program')



@app.route("/CRUD/Read-Modify-Delete/Phone/Update/<int:num>", methods = ['GET','POST'])
def Up_Phone(num):
    if request.method == 'GET':
        return render_template("Updates/Update-Phones.html",num=num)

    #else

    form = {}
    for key,value in request.form.items():
        if (value==''):
            form[key] = 'NULL'
        else:
            form[key] = '"'+value+'"'


    query = '''UPDATE Phone_inst SET  Number={}, Org_id= {}
    WHERE Number = {};'''.format(form['Number'],form['Org_id'], num)

    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Phone_inst updated successfully", "success")
    except Exception as e:
        flash(str(e), "danger")

    return redirect('/CRUD/Read-Modify-Delete/Phone')






@app.route("/CRUD/Read-Modify-Delete/Participates/Update/<string:data>", methods = ['GET','POST'])
def Up_Participates(data):
    if request.method == 'GET':
        return render_template("Updates/Update-Participates.html",data=data)

    #else

    form = {}
    for key,value in request.form.items():
        if (value==''):
            form[key] = 'NULL'
        else:
            form[key] = '"'+value+'"'

    data = data.split(",")
    p_id = data[0]
    r_id = data[1]

    query = '''UPDATE Participates SET Project_id = {}, Researcher_id = {}
            WHERE Project_id = {} AND Researcher_id = {};'''.format(form['Project_id'],form['Researcher_id'],p_id,r_id)

    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Participates updated successfully", "success")
    except Exception as e:
        flash(str(e), "danger")

    return redirect('/CRUD/Read-Modify-Delete/Participates')




@app.route("/CRUD/Read-Modify-Delete/Organisation/Update/<string:data>", methods = ['GET','POST'])
def Up_Organisation(data):
    if request.method == 'GET':
        return render_template("Updates/Update-Organisation.html", data=data)

    #else


    if ('"' in request.form['Abbreviation'] or '"' in request.form['Name'] or '"' in request.form['Zip_code']
        or '"' in request.form['Street'] or '"' in request.form['City']):
        flash('Text fields must not contain quotation marks', "danger")
        return redirect('/CRUD/Read-Modify-Delete/Organisation/Update/{}'.format(data))


    form = {}
    for key,value in request.form.items():
        if (value==''):
            form[key] = 'NULL'
        else:
            form[key] = '"'+value+'"'

    data = data.split(",")
    id = data[0]
    Type = ','.join(data[1:])

    query1 = '''UPDATE Organisation SET Abbreviation={}, Name={}, Zip_code={}, Street={}, City={}
            WHERE Org_id = {};'''.format(form['Abbreviation'],form['Name'],form['Zip_code'],form['Street'],form['City'], id)

    try:
        cur = db.connection.cursor()
        cur.execute(query1)
        db.connection.commit()



        if (Type=="Research_Facility"):
            query2 = '''UPDATE Res_facility SET Min_budget={}, Priv_budget={}
                        WHERE Org_id = {};'''.format(form['Min_budget'],form['Priv_budget'],id)

        elif (Type=="University"):
            query2 = '''UPDATE University SET  Min_budget={}
                    WHERE Org_id = {};'''.format(form['Min_budget'],id)

        elif (Type=="Company"):
            query2 = '''UPDATE Company SET Equity={}
                    WHERE Org_id = {};'''.format(form['Equity'],id)
        else:
            raise Exception("Type must be one of: University, Research facility, Company")

        cur.execute(query2)
        db.connection.commit()

        cur.close()
        flash("Organisation updated successfully", "success")
    except Exception as e:
        flash(str(e), "danger")

    return redirect('/CRUD/Read-Modify-Delete/Organisation')





@app.route("/CRUD/Read-Modify-Delete/Field/Update/<string:name>", methods = ['GET','POST'])
def Up_Field(name):
    if request.method == 'GET':
        return render_template("Updates/Update-Field.html",name=name)

    if ('"' in request.form['Field_name']):
        flash('Text fields must not contain quotation marks', "danger")
        return redirect('/CRUD/Read-Modify-Delete/Field/Update/{}'.format(name))

    form = {}
    for key,value in request.form.items():
        if (value==''):
            form[key] = 'NULL'
        else:
            form[key] = '"'+value+'"'


    query = '''UPDATE Fields SET Field_name={}
            WHERE Field_name = "{}";'''.format(form['Field_name'], name)

    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Field updated successfully", "success")
    except Exception as e:
        flash(str(e), "danger")

    return redirect('/CRUD/Read-Modify-Delete/Field')




@app.route("/CRUD/Read-Modify-Delete/Executive/Update/<int:Executive_id>", methods = ['GET','POST'])
def Up_Executive(Executive_id):
    if request.method == 'GET':
        return render_template("Updates/Update-Executive.html",Executive_id=Executive_id)

    #else

    if ('"' in request.form['Name']):
        flash('Text fields must not contain quotation marks', "danger")
        return redirect('/CRUD/Read-Modify-Delete/Executive/Update/{}'.format(Executive_id))


    form = {}
    for key,value in request.form.items():
        if (value==''):
            form[key] = 'NULL'
        else:
            form[key] = '"'+value+'"'


    query = '''UPDATE EXECUTIVE SET Name ={}
            WHERE Executive_id = {};'''.format(form['Name'],Executive_id)

    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Executive updated successfully", "success")
    except Exception as e:
        flash(str(e), "danger")

    return redirect('/CRUD/Read-Modify-Delete/Executive')



@app.route("/CRUD/Read-Modify-Delete/Deliverable/Update/<string:data>", methods = ['GET','POST'])
def Up_Deliverable(data):
    if request.method == 'GET':
        return render_template("Updates/Update-Deliverable.html",data=data)

    #else

    if ('"' in request.form['Title'] or '"' in request.form['Summary']):
        flash('Text fields must not contain quotation marks', "danger")
        return redirect('/CRUD/Read-Modify-Delete/Deliverable/Update/{}'.format(data))


    form = {}
    for key,value in request.form.items():
        if (value==''):
            form[key] = 'NULL'
        else:
            form[key] = '"'+value+'"'

    data = data.split(",")
    id = data[0]
    title = ','.join(data[1:])

    query = '''UPDATE Deliverable SET Project_id={},Title={},Summary={},Due_date={}
            WHERE Project_id = {} AND Title = "{}";'''.format(form['Project_id'],form['Title'],form['Summary'],form['Due_date'],id, title)

    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Deliverable updated successfully", "success")
    except Exception as e:
        flash(str(e), "danger")

    return redirect('/CRUD/Read-Modify-Delete/Deliverable')
